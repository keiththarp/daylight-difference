{"version":3,"sources":["reportWebVitals.ts","views/About/About.tsx","components/CityToCoords.tsx","api/api.ts","views/Differentiator/Differentiator.tsx","components/AppHeader.tsx","components/Menu.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","About","className","href","CityToCoords","props","useState","dayLength","setDayLength","searchResults","setSearchResults","searchTerm","setSearchTerm","chosenCity","setChosenCity","regex","chosenHandler","lat","lng","city","replace","date","apiUrl","axios","get","callSunTimes","res","data","results","day_length","displayData","cityNumber","onChange","event","currentTarget","value","placeholder","onClick","process","findCoords","length","map","index","geometry","formatted","today","DateTime","local","toFormat","Differentiator","setDate","city1","daylight1","city2","daylight2","locationData","setLocationData","dataSetter","daylight","cityName","DifferenceDisplayer","dl1","toString","dl2","d1","fromISO","d2","difference","diff","useEffect","AppHeader","Menu","to","icon","faHome","faInfoCircle","App","basename","path","exact","component","dotenv","resolve","__dirname","debug","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b06feb6.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nexport default function About(): JSX.Element {\n  return (\n    <div>\n      <div className=\"about-screen\">\n        <p>\n          I built this app the winter of 2020/21 while hiding from COVID-19, tucked away in a quiet house in the woods near Acadia National Park.\n          The super short winter days had me wondering how much sunlight we were missing out on compared to friends and family several hours to the south of us.\n        </p>\n        <p>\n          <h4>Technologies:</h4>\n          <ul>\n            <li>React</li>\n            <li>BootStrap</li>\n            <li>TypeScript</li>\n            <li>Axios</li>\n            <li>Luxon</li>\n          </ul>\n        </p>\n        <p>\n          <h4>APIs:</h4>\n          <ul>\n            <li><a href=\"https://opencagedata.com/api\">OpenCage Geocoding</a> used to populate the location search and Lat/Long data.</li>\n            <li><a href=\"https://sunrise-sunset.org/api\">Sunrise Sunset API</a> Provides sunrise/set times, but conveniently enough also provides day length data, eliminating a math step.</li>\n          </ul>\n        </p>\n      </div>\n    </div>\n  )\n};","import React, { useState } from 'react';\nimport { findCoords, callSunTimes } from '../api/api'\nimport './components.css';\n\nfunction CityToCoords(props: any): JSX.Element {\n\n  const [dayLength, setDayLength] = useState(0);\n  const [searchResults, setSearchResults] = useState<any>([])\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [chosenCity, setChosenCity] = useState(\"\");\n\n  // Selects everything after comma in formatted city to deliver city name\n  const regex = /,(.*)/\n\n  // Keeps track of search term\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.currentTarget.value)\n  }\n\n  // Use search term to call for matching list of cities and coordinates\n  const searchHandler = () => {\n    findCoords(searchTerm).then((res) => {\n      setSearchResults(res.data.results)\n      setDayLength(0)\n    })\n  }\n\n  // Use coordinates to call city's daylight data\n  const chosenHandler = (lat: number, lng: number, city: string) => {\n    setChosenCity(city.replace(regex, \"\"))\n\n    callSunTimes(lat, lng, props.date).then((res) => {\n      setDayLength(res.data.results.day_length)\n      setSearchResults([])\n      props.displayData(props.cityNumber, res.data.results.day_length, city.replace(regex, \"\"))\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"about-screen\">\n        <input\n          className=\"city-search-input m-3\"\n          onChange={handleSearchChange}\n          value={searchTerm}\n          placeholder=\"Search Location\"\n        />\n        <button onClick={searchHandler}>Search</button>\n\n        {/* If we have a list to display, display it. */}\n        {searchResults.length > 0\n          ?\n          <div className=\"row justify-content-center mt-2\">\n            <div className=\"col-auto border border-secondary bg-light\">\n              <h4 className=\"mt-2\">Choose the correct location</h4>\n              <ul className=\"city-list\">\n\n                {/* Map over city list to display list with select buttons */}\n                {searchResults.map(function (city: any, index: number) {\n                  return <li key={index}>\n                    <button\n                      onClick={() => {\n                        chosenHandler(city.geometry.lat, city.geometry.lng, city.formatted);\n                      }\n                      }\n                      className=\"city-option-button\"\n                    >\n                      +\n                    </button>\n                    {city.formatted}\n                  </li>\n                })}\n\n              </ul>\n            </div>\n          </div>\n          // Otherwise, no list will display\n          : null}\n\n        <div>{dayLength !== 0 && <div>{chosenCity} has <span className=\"day-length\">{dayLength}</span> of daylight.</div>}</div>\n      </div>\n    </div>\n  )\n};\nexport default CityToCoords;","import React from 'react';\nimport axios from 'axios'\n\n\n// Take in city name and return possible matches then deliver coordinates\nconst findCoords = (searchTerm: string) => {\n  const apiUrl = `https://api.opencagedata.com/geocode/v1/json?q=${searchTerm}&key=${process.env.REACT_APP_COORDS_API_PW}`;\n  return axios.get(apiUrl);\n};\n\n// Use coordinates from OpenCage to deliver daylight time for chosen location\nconst callSunTimes = (lat: number, lng: number, date: string) => {\n  const apiUrl = `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${date}`;\n  return axios.get(apiUrl);\n}\n\nexport {\n  findCoords,\n  callSunTimes\n};\n","import React, { useEffect, useState } from 'react';\nimport CityToCoords from '../../components/CityToCoords';\nimport { DateTime } from \"luxon\";\n\n// Set today's date for date input\nconst today = DateTime.local().toFormat('yyyy-MM-dd')\n\nfunction Differentiator(): JSX.Element {\n\n  const [date, setDate] = useState<string>(today);\n  const [locationData, setLocationData] = useState({\n    city1: \"\",\n    daylight1: 0,\n    city2: \"\",\n    daylight2: 0\n  })\n  const { city1, daylight1, city2, daylight2 } = locationData\n\n  // Take in data from components and set to state\n  const dataSetter = (cityNumber: number, daylight: number, cityName: string) => {\n    if (cityNumber === 1) {\n      setLocationData({\n        ...locationData,\n        city1: cityName,\n        daylight1: daylight\n      })\n    } else {\n      setLocationData({\n        ...locationData,\n        city2: cityName,\n        daylight2: daylight\n      })\n    }\n  }\n\n  // If date is chosen update state\n  const handleDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDate(event.currentTarget.value);\n  }\n\n  // Using luxon for time math then organizing for display\n  const DifferenceDisplayer = () => {\n    const dl1 = daylight1.toString();\n    const dl2 = daylight2.toString();\n    const d1 = DateTime.fromISO(dl1)\n    const d2 = DateTime.fromISO(dl2)\n\n    if (daylight1 > daylight2) {\n      const difference = d1.diff(d2, ['hours', 'minutes', 'seconds']).toFormat('hh:mm:ss')\n      return <div>{city1} has {difference} more daylight than {city2}.</div>\n    } else {\n      const difference = d2.diff(d1, ['hours', 'minutes', 'seconds']).toFormat('hh:mm:ss')\n      return <div>{city2} has {difference} more daylight than {city1}.</div>\n    }\n  }\n\n  // Waiting for state to update\n  useEffect(() => {\n    if (daylight1 && daylight2) {\n      DifferenceDisplayer()\n    }\n  }, [daylight1, daylight2, locationData])\n\n  return (\n    <div className=\"daylight-body\">\n      <div>\n        <label>\n          Enter a date (yyyy-mm-dd) <input\n            className=\"city-search-input mb-4\"\n            onChange={handleDateChange}\n            value={date}\n            placeholder=\"YYYY-MM-DD\"\n          />\n        </label>\n      </div>\n      <div>\n        <h3>City name for location 1</h3>\n        <CityToCoords displayData={dataSetter} cityNumber={1} date={date} />\n      </div>\n      <div className=\"mt-4\">\n        <h3>City name for location 2</h3>\n        <CityToCoords displayData={dataSetter} cityNumber={2} date={date} />\n      </div>\n      {(daylight1 && daylight2)\n        ?\n        <div className=\"py-3 bg-light\"><DifferenceDisplayer /></div>\n        : null}\n    </div>\n  )\n};\nexport default Differentiator;","import React from 'react';\nimport './components.css'\n\nexport default function AppHeader(): JSX.Element {\n  return (\n    <div>\n      <div className=\"daylight-header\">\n        <h1>Daylight Difference Determiner</h1>\n      </div>\n      <h4 className=\"mt-2 mb-3 text-light\">Calculate the difference in daylight time between two locations.</h4>\n    </div>\n  )\n};","import React from 'react';\nimport './components.css'\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Menu(): JSX.Element {\n  return (\n    <div className=\"menu-container d-flex mx-4 justify-content-around\">\n      <div className=\"text-light\">Daylight Difference Determiner</div>\n      <div>\n        <Link to='/'>\n          <FontAwesomeIcon className=\"text-light\" icon={faHome} />\n        </Link>\n      </div>\n      <div>\n        <Link to='/about'>\n          <FontAwesomeIcon className=\"text-light\" icon={faInfoCircle} />\n        </Link>\n      </div>\n    </div>\n  )\n};","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport About from './views/About/About';\nimport Differentiator from './views/Differentiator/Differentiator'\nimport AppHeader from './components/AppHeader';\nimport Menu from './components/Menu'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App d-flex flex-column align-items-center\">\n      <Router basename=\"/daylight-difference\">\n        <AppHeader />\n        <div className=\"main-container\">\n          <Switch>\n            <Route path=\"/\" exact component={Differentiator} />\n            <Route path=\"/about\" exact component={About} />\n          </Switch>\n        </div>\n        <Menu />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { resolve } from 'path';\nimport * as dotenv from 'dotenv';\ndotenv.config({\n  path: resolve(__dirname, '../.env'),\n  debug: true\n});\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}